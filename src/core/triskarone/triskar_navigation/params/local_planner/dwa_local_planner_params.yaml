#Parameters for base_local_planner, to use it set: base_local_planner : "dwa_local_planner/DWAPlannerROS " in the file: "move_base_general_params". Reference at: http://wiki.ros.org/dwa_local_planner. Modular DWA implementation with a lot cleaner and easier interface to understand and more flexible y axis variables for holonomic robots than base_local_planner's DWA 



############################################################################################################################################################################################################

#Robot Configuration Parameters
DWAPlannerROS:
#The x acceleration limit of the robot in meters/sec^2 
 acc_lim_x: 2.5

#The y acceleration limit of the robot in meters/sec^2 
 acc_lim_y: 2.5

#The rotational acceleration limit of the robot in radians/sec^2 
 acc_lim_th: 3.2

#The absolute value of the maximum translational velocity for the robot in m/s 
 max_vel_trans: 0.55

#The absolute value of the minimum translational velocity for the robot in m/s 
 min_vel_trans: 0.1
   
#The maximum forward velocity allowed for thebase in meters/sec 
 max_vel_x: 1.5

#The minimum forward velocity allowed for the base in meters/sec. It is useful to specify this to guarantee that velocity commands sent to a mobile base are high enough to allow the base to overcome friction. 
 min_vel_x: 0.1

#The maximum y velocity for the robot in m/s 
 max_vel_y: 1.5

#The minimum y velocity for the robot in m/s  
 min_vel_y: 0.1

#The maximum rotational velocity allowed for the base in radians/sec 
 max_vel_theta: 1.0

#The minimum rotational velocity allowed for the base in radians/sec    
 min_vel_theta: 0.1

###########################################################################################################################################################################################################

#Goal Tolerance Parameters

#The tolerance in radians for the controller in yaw/rotation when achieving its goal 
 yaw_goal_tolerance: 0.2

#The tolerance in meters for the controller in the x & y distance when achieving a goal 
 xy_goal_tolerance: 0.50

#If goal tolerance is latched, if the robot ever reaches the goal xy location it will simply rotate in place, even if it ends up outside the goal tolerance while it is doing so.
 latch_xy_goal_tolerance: true

###########################################################################################################################################################################################################

#Forward Simulation Parameters

#The amount of time to forward-simulate trajectories in seconds 
 sim_time: 2.5  #this value is enough to have a good behaviour but not too slow

#The step size, in meters, to take between points on a given trajectory 
 sim_granularity: 0.025

#The number of samples to use when exploring the x velocity space 
 vx_samples: 10

#The number of samples to use when exploring the y velocity space 
 vy_samples: 10

#The number of samples to use when exploring the theta velocity space   
 vth_samples: 15

#The frequency at which this controller will be called in Hz. Uses searchParam to read the parameter from parent namespaces if not set in the namespace of the controller. For use with move_base, this means that you only need to set its "controller_frequency" parameter and can safely leave this one unset.
#controller_frequency: 10.0

###########################################################################################################################################################################################################

#Trajectory Scoring Parameters

#The cost function used to score each trajectory is in the following form:

#cost = path_distance_bias * (distance to path from the endpoint of the trajectory in meters) + goal_distance_bias * (distance to local goal from the endpoint of the trajectory in meters) + occdist_scale * (maximum obstacle cost along the trajectory in obstacle cost (0-254))

#The weighting for how much the controller should stay close to the path it was given 
 path_distance_bias: 32.0

#The weighting for how much the controller should attempt to reach its local goal, also controls speed 
 goal_distance_bias: 24.0

#The weighting for how much the controller should attempt to avoid obstacles 
 occdist_scale: 0.01

#The distance from the center point of the robot to place an additional scoring point, in meters
 forward_point_distance: 0.325

#The amount of time that the robot must stop before a collision in order for a trajectory to be considered valid in seconds 
 stop_time_buffer: 0.2

#The absolute value of the velocity at which to start scaling the robot's footprint, in m/s   
 scaling_speed: 0.25

#The maximum factor to scale the robot's footprint by 
 max_scaling_factor: 0.1

#Whether or not to publish the cost grid that the planner will use when planning. When true, a sensor_msgs/PointCloud2 will be available on the ~<name>/cost_cloud topic. Each point cloud represents the cost grid and has a field for each individual scoring function component as well as the overall cost for each cell, taking the scoring parameters into account. 
 publish_cost_grid: false


##########################################################################################################################################################################################################

#Oscillation Prevention Parameters

#How far the robot must travel in meters before oscillation flags are reset 
 oscillation_reset_dist: 0.05 

##########################################################################################################################################################################################################
    
#Global Plan Parameters

#Defines whether or not to eat up the plan as the robot moves along the path. If set to true, points will fall off the end of the plan once the robot moves 1 meter past them. 
 prune_plan: true

   



 
